#!/bin/bash

PROGNAME="$( basename $0 )"

cwd=`pwd -P`

TARGET_FILE=$0
while [ "$TARGET_FILE" != "" ]; do
    cd `dirname $TARGET_FILE`
    FILENAME=`basename $TARGET_FILE`
    TARGET_FILE=`readlink $FILENAME`
done
DIRECTORY=`pwd -P`
cd $cwd

function usage() {
  cat << __USAGE__
Usage: ${PROGNAME} <command>
  Command line interface for Unity Package Manager

Commands:
  install     Install commands from gist
  init        Initialize Unity project for packages
  add         Add something into project
  help        Show help

Options:
  -h, --help    Show usage.
__USAGE__
  exit 1
}

function usage_init() {
  cat << __USAGE__
Usage: ${PROGNAME} init <registry_name> <project_name> <display_name> [<description>]
  Initialize Unity project for Unity Package Manager

Note:
  Launch interactive shell if parameters are not specified.

Parameters:
  registry_name   Name of registry configured in ~/.upm-config.json
  project_name    Name of project
  display_name    Name what displayed in Unity Package Manager UI
  description     Description of package

Options:
  -h, --help    Show usage.
__USAGE__
  exit 1
}

function usage_add() {
  cat << __USAGE__
Usage: ${PROGNAME} add <subcommand>
  Add something into Unity Package Project

Commands:
  registry    Add registry settings into Packages/manifest.json
  package     Add package into Packages/manifest.json

Options:
  -h, --help    Show usage.
__USAGE__
  exit 1
}

function usage_add_registry() {
  cat << __USAGE__
Usage: ${PROGNAME} add registry <registry_name>
  Add registry into Packages/manifest.json

Note:
  Launch interactive shell if parameters are not specified.

Parameters:
  registry_name   Name of registry configured in ~/.upm-config.json

Options:
  -h, --help    Show usage.
__USAGE__
  exit 1
}

function usage_add_package() {
  cat << __USAGE__
Usage: ${PROGNAME} add package <package_name> <version>
  Add package into Packages/manifest.json and Assets/package.json

Note:
  Launch interactive shell if parameters are not specified.

Parameters:
  package_name    Name of package (FQDN format)
  version         Version number (SemVer format)

Options:
  -h, --help    Show usage.
__USAGE__
  exit 1
}

PARAM=()
HELP=0
COMMAND=""
SUBCOMMAND=""
for OPT in "$@"; do
  case "${OPT}" in
    'init' )
      COMMAND="init"; shift
      ;;
    'add' )
      COMMAND="add"; shift

      case "$1" in
        'registry' )
          SUBCOMMAND="registry"; shift
          ;;
        'package' )
          SUBCOMMAND="package"; shift
          ;;
        * )
          ;;
      esac
      ;;
    'help' )
      HELP=1; shift
      ;;
    '-h' | '--help' )
      HELP=1; shift
      ;;
    '--' | '-' )
      shift
      PARAM+=( "$@" )
      break
      ;;
    -* )
      echo "${PROGNAME}: illegal option -- '$( echo $1 | sed 's/^-*//' )'" 1>&2
      exit 1
      ;;
    * )
      if [[ -n "$1" ]] && [[ ! "$1" =~ ^-+ ]]; then
        PARAM+=( "$1" ); shift
      fi
      ;;
  esac
done

if [[ -z "${COMMAND}" ]]; then
  usage
fi

if [ ${HELP} -eq 1 ]; then
  if [[ -z "${COMMAND}" ]]; then
    usage
  fi

  case "${COMMAND}" in
    'init' )
      usage_init
      ;;
    'add' )
      case "${SUBCOMMAND}" in
        'registry' )
          usage_add_registry
          ;;
        'package' )
          usage_add_package
          ;;
        * )
          usage_add
          ;;
      esac
      ;;
  esac
fi

case "${COMMAND}" in
  'init' )
    source "${DIRECTORY}/scripts/upm-init.sh" "${PARAM[@]}"
    ;;
  'add' )
    case "${SUBCOMMAND}" in
      'registry' )
        source "${DIRECTORY}/scripts/upm-add-registry.sh" "${PARAM[@]}"
        ;;
      'package' || '' )
        source "${DIRECTORY}/scripts/upm-add-package.sh" "${PARAM[@]}"
        ;;
    esac
    ;;
esac

